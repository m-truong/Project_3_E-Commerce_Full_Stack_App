{"version":3,"sources":["Components/Context.js","Components/Rating.js","Components/Product.js","Pages/HomePage.js","Components/Loading.js","Pages/ShowPage.js","Components/Error.js","Components/CartRow.js","Components/CartList.js","Pages/CartPage.js","Pages/AboutPage.js","Pages/ContactPage.js","Pages/RegisterPage.js","Pages/LoginPage.js","App.js","reportWebVitals.js","index.js"],"names":["RacquetMongoDBContext","createContext","Rating","rating","numReviews","className","Product","product","to","_id","src","image","alt","model","price","HomePage","racquetData","useContext","racquets","map","Loading","url","console","log","process","ShowPage","routerProps","customerLoggedIn","tokenData","token","currentCustomerLoggedIn","setCustomerLoggedIn","useState","qty","setQty","racquetToDisplay","find","currRacquet","match","params","id","addToCartHandler","evt","a","username","password","tempCart","product_cart","body","JSON","stringify","fetch","method","headers","response","json","updatedCustomer","window","localStorage","setItem","error","description","head_size","swingweight","weight","balance","pattern","tension","stiffness_human","stiffness","countInStock","value","onChange","e","target","name","onClick","Error","props","variant","children","CartRow","currRacquetData","index","handleRemoveCart","slice","Row","Col","style","width","CartList","totalPrice","setTotalPrice","sum","Container","fluid","Math","round","CartPage","length","lg","href","AboutPage","ContactPage","htmlFor","type","placeholder","height","preventDefault","prevDefault","RegisterPage","regNameInput","useRef","regPasswordInput","registerHandler","current","currentTarget","reset","location","onSubmit","ref","LoginPage","setToken","usernameInput","passwordInput","loginHandler","data","user","App","setRacquets","loading","setLoading","setError","fetchData","axios","get","message","useEffect","getItem","Provider","class","clear","path","component","render","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.b9de3107.chunk.js","sourcesContent":["import { createContext } from \"react\"\nexport const RacquetMongoDBContext = createContext(null)","import React from 'react'\n \nfunction Rating({ rating, numReviews }) {\n    return ( \n        <div className=\"x-rating\">\n            {/* FontAwesome Stars */}\n            {/* Each FontAwesome Star conditionally renders a \"full-star\", \"half-star\", or no star, based on the tennis racquet model's rating field-property between 0-5. */}\n            <span>\n                <i className={\n                    rating >= 1\n                        ? \"fa fa-star\"\n                        : rating >= 0.5\n                            ? \"fa fa-star-half-o\"\n                            : \"fa fa-start-o\"}>\n                </i> \n            </span>\n            <span>\n                <i className={\n                    rating >= 2\n                        ? \"fa fa-star\"\n                        : rating >= 1.5\n                            ? \"fa fa-star-half-o\"\n                            : \"fa fa-start-o\"}>\n                </i>\n            </span>\n            <span>\n                <i className={\n                    rating >= 3\n                        ? \"fa fa-star\"\n                        : rating >= 2.5\n                            ? \"fa fa-star-half-o\"\n                            : \"fa fa-start-o\"}>\n                </i>\n            </span>\n            <span>\n                <i className={\n                    rating >= 4\n                        ? \"fa fa-star\"\n                        : rating >= 3.5\n                            ? \"fa fa-star-half-o\"\n                            : \"fa fa-start-o\"}>\n                </i>\n            </span>\n            <span>\n                <i className={\n                    rating >= 5\n                        ? \"fa fa-star\"\n                        : rating >= 4.5\n                            ? \"fa fa-star-half-o\"\n                            : \"fa fa-start-o\"}>\n                </i>\n            </span>\n            {/* Number of Reviews */}\n            <span>\n                {`${numReviews} reviews`}\n            </span>\n        </div>\n    )\n}\n\nexport default Rating","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Rating from './Rating'\n\nexport default function Product({ product }) {\n    return (\n        // Card \n        <div key={product._id} className=\"x-card\">\n            {/* Image */}\n            {/* Tennis Racquet image is a link that renders the \"ShowPage\" using the \"product._id\" as the query-parameter. */}\n            <Link to={`/product/${product._id}`}>\n                <img className=\"x-medium\" src={product.image} alt={product.model} />\n            </Link>\n            {/* Card-Body */}\n            <div className=\"x-card-body\">\n                {/* Product Name is also a link that renders the \"ShowPage\". */}\n                <Link to={`/product/${product._id}`}>\n                    <h2 className=\"x-card-link\">{product.model}</h2>\n                </Link>\n                {/* Rating Component */}\n                <Rating\n                    rating={product.rating}\n                    numReviews={product.numReviews}\n                />\n                {/* Product Price */}\n                <div className=\"x-price\">${product.price}</div>\n            </div>\n        </div>\n    )\n}\n","import React, { useContext } from 'react'\nimport { RacquetMongoDBContext } from \"../Components/Context.js\"\nimport Product from \"../Components/Product\";\n\nfunction HomePage() {\n    const { racquetData } = useContext(RacquetMongoDBContext);\n    const [racquets] = racquetData;\n    return (\n        <div className=\"x-row x-center\"> \n            {\n                // Maps over every tennis racquet and displays on \"HomePage\".\n                racquets.map((product) => {\n                    return (\n                        <Product key={product._id} product={product} />\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default HomePage","import React from 'react'\n\n/**\n * \"Loading\" component renders cool FontAwesome spinner while page is loading.\n */\nfunction Loading() {\n    return (\n        <div>\n            <i className=\"fa fa-spinner fa-spin\"></i> Picking up the tennis balls... 🎾 🎾 🎾\n        </div>\n    )\n}\n\nexport default Loading\n","import React, { useState, useContext } from 'react'\nimport { RacquetMongoDBContext } from \"../Components/Context.js\"\nimport Rating from '../Components/Rating'\nimport { Link } from 'react-router-dom'\nimport Loading from '../Components/Loading'\n\n// ===================\n// SET DEV/PROD-ENVIRONMENT\n// ===================\nconst production = 'https://racquetdash.herokuapp.com';\nconst development = 'http://localhost:3000';\nconst url = (process.env.NODE_ENV ? development : production);\nconsole.log(`NODE_ENV is ${process.env.NODE_ENV}, so base_url is connecting to ${url}`)\n\nfunction ShowPage({ routerProps }) {\n    const { racquetData, customerLoggedIn, tokenData } = useContext(RacquetMongoDBContext);\n    const [racquets] = racquetData;\n    const [token] = tokenData\n    const [currentCustomerLoggedIn, setCustomerLoggedIn] = customerLoggedIn;\n    const [qty, setQty] = useState(1)\n    // The array-find method searches through the \"racquets\" state array for a tennis racquet matching the \"routerProps.match.params.id\" and stores it into \"racquetToDisplay\". \n    const racquetToDisplay = racquets.find((currRacquet) => currRacquet._id === routerProps.match.params.id)\n\n    if (!racquetToDisplay) {\n        return (\n            <Loading />\n        )\n    }\n\n    const addToCartHandler = async (evt) => {\n        const { _id, username, password } = currentCustomerLoggedIn\n        const tempCart = currentCustomerLoggedIn.product_cart\n        // This adds the current tennis racquet being displayed to the product_cart array.\n        const product_cart = [...tempCart, racquetToDisplay];\n        // The \"updated\" Customer object is sent back to the \"PUT\" route for updating the \"Customer\" with the new \"product_cart\" array. \n        const body = JSON.stringify({\n            _id, username, password, product_cart\n        });\n        try {\n            const response = await fetch(`${url}/api/customers/productcart/${_id}`, {\n                method: \"PUT\", \n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": token\n                },\n                body\n            });\n            // The \"updatedCustomer\" object is used to set the \"currentCustomerLoggedIn\" state and updated in the localStorage. \n            const updatedCustomer = await response.json();\n            setCustomerLoggedIn(updatedCustomer);\n            window.localStorage.setItem('currentCustomerLoggedIn', updatedCustomer)\n        } catch (err) {\n            console.error(err);\n        }\n    }\n    return (\n        <div>\n            <Link className=\"back-btn\" to=\"/\"> Back To Index Page of Tennis Racquets </Link>\n            {/* Columns */}\n            <div className=\"x-row x-top\">\n                {/* Tennis Racquet Image Column */}\n                <div className=\"x-col-2\">\n                    <img className=\"x-large\" src={racquetToDisplay.image} alt={racquetToDisplay.model} />\n                </div>\n                {/* Description and Racquet Model Specifications Column */}\n                <div className=\"x-col-1\">\n                    <ul>\n                        <li>\n                            <h1>{racquetToDisplay.model}</h1>\n                        </li>\n                        <li>\n                            <Rating rating={racquetToDisplay.rating} numReviews={racquetToDisplay.numReviews} />\n                        </li>\n                        <li className=\"x-price\">\n                            <span>Price:</span> ${racquetToDisplay.price}\n                        </li>\n                        <li>\n                            <h2>Description:</h2>\n                        </li>\n                        <li>\n                            <p className=\"show-description\">{racquetToDisplay.description}</p>\n                        </li>\n                        <li>\n                            <h2>Racquet Model Specifications:</h2>\n                        </li>\n                        <li>\n                            <span>Head Size: </span>{racquetToDisplay.head_size} in<sup>2</sup>\n                        </li>\n                        <li>\n                            <span>Swing Weight: </span>{racquetToDisplay.swingweight} RDC (Racquet Diagostic Centre)\n                        </li>\n                        <li>\n                            <span>Racquet Weight: </span>{racquetToDisplay.weight} oz\n                        </li>\n                        <li>\n                            <span>Racquet Balance: </span>{racquetToDisplay.balance}\n                        </li>\n                        <li>\n                            <span>String Pattern: </span>{racquetToDisplay.pattern}\n                        </li>\n                        <li>\n                            <span>String Tension: </span>{racquetToDisplay.tension}\n                        </li>\n                        <li>\n                            <span>Stiffness Human: </span>{racquetToDisplay.stiffness_human}\n                        </li>\n                        <li>\n                            <span>Stiffness: </span>{racquetToDisplay.stiffness} RA\n                        </li>\n                    </ul>\n                </div>\n                {/* action items */}\n                <div className=\"x-col-1\">\n                    <div className=\"x-card x-card-body\">\n                        <ul>\n                            <li>\n                                <div className=\"x-row\">\n                                    {/* Displays Racquet Price */}\n                                    <div className=\"action-text\">\n                                        Price\n                                    </div>\n                                    <div className=\"x-price\">\n                                        ${racquetToDisplay.price}\n                                    </div>\n                                </div>\n                            </li>\n                            <li> \n                                <div className=\"x-row\">\n                                    <div className=\"action-text\">\n                                        Status\n                                    </div>\n                                    <div>\n                                        {/* This conditionally renders different colored text base on whether the \"racquetToDisplay\".countInStock property is > 0. If it's in stock, green text \"In Stock\" is displayed, else it displays red text \"Unavailable\" */}\n                                        {\n                                            racquetToDisplay.countInStock > 0\n                                                ? (<span className=\"x-success\">In Stock</span>)\n                                                : (<span className=\"x-error\">Unavailable</span>)\n                                        }\n                                    </div>\n                                </div>\n                            </li>\n                            {/* This conditionally renders a <Link> component to the \"LoginPage\" if no customer is logged in, or it renders the Quantity selector and \"Add To Cart\" button if a customer is logged in and the \"countInStock\" for the tennis racquet is > 0, or it displays red text informing the customer the product is out of stock and to revist the page later.  */}\n                            {\n                                !currentCustomerLoggedIn.username ? (\n                                    <div className=\"login-text\">\n                                        <Link to=\"/login\">Please Login to Add to Cart</Link>\n                                    </div>\n                                ) : currentCustomerLoggedIn && racquetToDisplay.countInStock > 0 ? (\n                                    <>\n                                        <li>\n                                            <div className=\"x-row\">\n                                                <div className=\"action-text\">Quantity:</div>\n                                                <div>\n                                                    {/* Note: I couldn't finish implementing this quantity selector, so it's only used for presentational purposes.*/}\n                                                    <select value={qty}\n                                                        onChange={e => setQty(e.target.value)}>\n                                                        <option value={1}>1</option>\n                                                        <option value={2}>2</option>\n                                                        <option value={3}>3</option>\n                                                        <option value={4}>4</option>\n                                                        <option value={5}>5</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li>\n                                            <button name=\"id\" value={racquetToDisplay._id} className=\"x-primary x-block\" onClick={evt => addToCartHandler(evt)}> Add To Cart</button>\n                                        </li>\n                                    </>\n                                ) : (\n                                            <li className=\"error-text x-error\">\n                                                Currently Out of Stock: Please Revisit Racquet Page Later\n                                            </li>\n                                        )\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default ShowPage\n","import React from 'react'\n\nfunction Error(props) {\n    return (\n        <div className={`x-alert x-alert-${props.variant || 'info'}`}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Error\n","import React, { useContext } from 'react'\nimport { RacquetMongoDBContext } from './Context';\nimport { Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// ===================\n// SET DEV/PROD-ENVIRONMENT\n// ===================\nconst production = 'https://racquetdash.herokuapp.com';\nconst development = 'http://localhost:3000';\nconst url = (process.env.NODE_ENV ? development : production);\nconsole.log(`NODE_ENV is ${process.env.NODE_ENV}, so base_url is connecting to ${url}`)\n\n// \"CartRow\" component renders a row of properties for each tennis racquet passed down as props from the \"CartList\" parent component.\n// The tennis racquet data is destructured and stored into variables \"_id\", \"model\", \"image\", and \"price\" which are rendered using Bootstrap \"Row\" and \"Col\" components.\nfunction CartRow({ currRacquetData, index}) {\n    const { _id, model, image, price } = currRacquetData\n    const { customerLoggedIn, tokenData } = useContext(RacquetMongoDBContext)\n    const [currentCustomerLoggedIn, setCustomerLoggedIn] = customerLoggedIn\n    const [token] = tokenData\n\n    // \"handleRemoveCart\" creates a copy of the \"currentCustomerLoggedIn\" object and slices out the current tennis racquet using its index inside the \"product_cart\" array of the \"Customer\" object.  \n    const handleRemoveCart = async (evt) => {\n        const { _id, username, password } = currentCustomerLoggedIn\n        const tempCart = currentCustomerLoggedIn.product_cart\n        // The tennis racquet is sliced out of the \"product_cart\" array of the \"Customer\" object.\n        const product_cart = [...tempCart.slice(0, index), ...tempCart.slice([index+1])];\n        // The \"updated\" Customer object is sent back to the \"PUT\" route for updating the \"Customer\" with a new \"product_cart\" array. \n        const body = JSON.stringify({\n            _id, username, password, product_cart\n        });\n        try {\n            const response = await fetch(`${url}/api/customers/productcart/${_id}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": token\n                },\n                body\n            });\n            // The \"updatedCustomer\" object is used to set the \"currentCustomerLoggedIn\" state and updated in the localStorage. \n            const updatedCustomer = await response.json();\n            setCustomerLoggedIn(updatedCustomer);\n            window.localStorage.setItem('currentCustomerLoggedIn', updatedCustomer)\n        } catch (err) {\n            console.error(err);\n        }\n    }\n    return (\n        // This renders the tennis racquet inside the cart page using Bootstrap \"Row\" and \"Col\" components.\n        <Row className=\"cart-rows justify-content-md-center\">\n            <Col className=\"col-10 mx-auto col-lg-2\">\n                <h2>Brand</h2>\n                <img className=\"img-fluid\" src={image} style={{ width: \"10rem\" }} alt={model} />\n            </Col>\n            <Col className=\"col-10 mx-auto col-lg-2\">\n                <h2>Model</h2>\n                <div className=\"cart-text\">\n                    <Link to={`/product/${_id}`}>{model}</Link>\n                </div>\n            </Col>\n            <Col className=\"col-10 mx-auto col-lg-2\">\n                <h2>Price</h2>\n                <div className=\"cart-text x-price\">${price}</div>\n            </Col>\n            <Col className=\"col-10 mx-auto col-lg-2\">\n                <h2>Remove</h2>\n                <div className=\"cart-text\">\n                    <button onClick={handleRemoveCart}><i className=\"fas fa-trash-alt\"></i></button>\n                </div>\n            </Col>\n        </Row>\n    )\n}\n\nexport default CartRow\n","import React, { useContext } from \"react\"\nimport { RacquetMongoDBContext } from \"./Context.js\";\nimport { Container } from \"react-bootstrap\";\nimport CartRow from \"./CartRow.js\"\n\nfunction CartList({ totalPrice, setTotalPrice }) {\n    let sum = 0;\n    const { customerLoggedIn } = useContext(RacquetMongoDBContext)\n    const [currentCustomerLoggedIn,] = customerLoggedIn;\n    return (\n        <Container fluid className=\"text-center d-lg-block\">\n            {/* This maps over the \"product_cart\" array of the \"currentCustomerLoggedIn\" state and passes each Racquet object in the array into a \"CartRow\" component to be rendered inside the \"CartList\" component. */}\n            {currentCustomerLoggedIn.product_cart.map((currRacquet, index) => {\n                sum += currRacquet.price;\n                // This sets the \"totalPrice\" state of the parent \"CartPage\" component to the sum of each \"currRacquet.price\" property, and lifts the state change back up to the \"CartPage\" component which displays it. \n                setTotalPrice((Math.round(sum * 100.0)) / 100.0)\n                return (\n                    <CartRow key={currRacquet._id}\n                        currRacquetData={currRacquet} index={index}/>\n                )\n            })}\n        </Container>\n    )\n}\n\nexport default CartList\n","import React, { useContext, useState } from 'react'\nimport { RacquetMongoDBContext } from \"../Components/Context.js\"\nimport { Link } from 'react-router-dom'\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Error from \"../Components/Error\";\nimport CartList from \"../Components/CartList.js\"\n\nfunction CartPage() {\n    const { customerLoggedIn } = useContext(RacquetMongoDBContext)\n    const [currentCustomerLoggedIn] = customerLoggedIn;\n    // \"totalPrice\" state is passed down into the \"CartList\" component so that as the \"CartList\" maps over the \"product_cart\" array of the \"Customer\" object, it sums the \"totalPrice\" and lifts the state back up to the \"CartPage\" component.\n    const [totalPrice, setTotalPrice] = useState(0);\n    return (\n        <>\n            {/* If \"Customer's\" product_cart property is empty, the \"Error\" component renders a link to the \"HomePage\" to add tennis racquets to their cart, else it renders the \"CartList\" component. */}\n            { currentCustomerLoggedIn.product_cart.length === 0 ?\n                (<Error>\n                    Cart is Empty. <Link to=\"/\">Please Add Items to your cart.</Link>\n                </Error>) \n                : (<>\n                <Link className=\"back-btn\" to=\"/\"> Back To Index Page of Tennis Racquets </Link>\n                    <h1 className=\"text-center\">Currently Selected Tennis Racquets in Your Cart</h1>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <CartList totalPrice={totalPrice} setTotalPrice={setTotalPrice} />\n                            </Col>\n                            <Col lg=\"2\" className=\"\" >\n                                {/* Renders a Card with \"totalPrice\" state and \"Checkout\" button */}\n                                <div className=\"x-card x-card-body\" style={{ width: '30rem' }}>\n                                    <div className=\"x-price\">\n                                        <div className=\"checkout-text\">\n                                            Total Price: ${totalPrice}\n                                        </div>\n                                        {/* \"Checkout\" button opens a JotForm order form page in a new tab where customers can provide their payment information and order details. */}\n                                        <a href=\"javascript:void( window.open( 'https://form.jotform.com/210008460872146', 'blank', 'scrollbars=yes, toolbar=no, width=700, height=500' ) ) \"> \n                                        <button className=\"checkout-text\">Checkout!</button> \n                                        </a>\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </>)\n            }\n        </>\n    )\n}\n\nexport default CartPage\n","import React from 'react'\nimport { Link } from \"react-router-dom\"\n\nconst AboutPage = (props) => { \n    return (\n        <div id=\"about-container\">\n            <h1 className=\"about-heading\">\"You only live once, but you get to serve twice.\" -- Founder Mike Truong 🎾 </h1>\n            <h2 className=\"about-heading\">What Drives Us At Racquet Dash</h2>\n            <hr />\n            <p className=\"about-para\"> We are based in Boston, Massachusetts, and we've welcomed customers from all over the World since opening our first store in 1991. Today we have expanded to several locations including Cambridge, MA, Providence, RI, Seattle, WA, and San Francisco, CA. Our e-comerce website www.racquetdash.herokuapp.com has helped supply professional tennis equipment for tennis players from all over the World. </p>\n            <p className=\"about-para\"> Aside from our commercial activity, Racquet Dash has helped sponser many premier tennis league tournaments in the Greater Boston Area such as the Cambridge Open, Junior Crimson Bowl, and the All-Paul-Revere Tennis Tournament amongst others. Needless to say that we are commited to promoting the sport of Tennis and contributing to its growth worldwide. </p>\n            <p className=\"about-para\"> We take pride in the tennis equipment we sell and providing our world-class selection of brand-named tennis equipment for pro and amateur players alike, so thank you for choosing Racquet Dash! </p>\n            {/* This button redirects the customer to the \"HomePage\" */}\n            <Link to=\"/\" className=\"about-link\">\n                <button className=\"about-btn\"> Ready To Up Your Tennis Game? </button>\n            </Link>\n        </div>\n    )\n}\nexport default AboutPage","import React from \"react\"\n\nconst ContactPage = (props) => {\n    // This helper method prevents the contact form from refreshing the Racquet Dash Store App.\n    const prevDefault = (e) => {\n        e.preventDefault();\n    }\n    return (\n        <>\n            <div className=\"x-contact-details\">\n                <h1>Contact Us</h1>\n                <h2>By Mail:</h2>\n                <p>25 Paul Revere, Rd.</p>\n                <p>Boston, MA</p> \n                <h2>By Phone:</h2>\n                <p>123-456-7890</p>\n                <h2>By Email:</h2>\n                <p>To contact us by email, please fill out the contact form below...</p>\n            </div>\n            <div className=\"x-contact-container\">\n                <form>\n                    <label htmlFor=\"fname\">First Name</label>\n                    <input type=\"text\"  placeholder=\"Your first name..\" />\n                    <label htmlFor=\"lname\">Last Name</label>\n                    <input type=\"text\"  placeholder=\"Your last name..\" />\n                    <label htmlFor=\"email-address\">Email Address</label>\n                    <input type=\"text\" placeholder=\"Your email address..\" />\n                    <label htmlFor=\"country\">Country</label>\n                    <select>\n                        <option value=\"australia\">Australia</option>\n                        <option value=\"canada\">Canada</option>\n                        <option value=\"china\">China</option>\n                        <option value=\"england\">England</option>\n                        <option value=\"france\">France</option>\n                        <option value=\"japan\">Japan</option>\n                        <option value=\"usa\">USA</option>\n                    </select>\n                    <label htmlFor=\"subject\">Subject</label>\n                    <textarea  placeholder=\"Please add any information here...\" style={{ height: `200px` }}></textarea>\n                    <button onClick={(e) => prevDefault(e)}>Contact Us</button>\n                </form>\n            </div>\n        </>\n    )\n}\nexport default ContactPage","import React, { useRef } from \"react\";\n\n/**\n * This creates a new \"Customer\" document object inside the \"customers\"\" collection of my RacquetDashDB sub-database by making a \"POST\" request to the \"/api/customers/register\" endpoint.\n */\n\n// ===================\n// SET DEV/PROD-ENVIRONMENT\n// ===================\nconst production = 'https://racquetdash.herokuapp.com';\nconst development = 'http://localhost:3000';\nconst url = (process.env.NODE_ENV ? development : production);\nconsole.log(`NODE_ENV is ${process.env.NODE_ENV}, so base_url is connecting to ${url}`)\n\nconst RegisterPage = (props) => {\n    const regNameInput = useRef(null);\n    const regPasswordInput = useRef(null);\n    const registerHandler = async (evt) => {\n        evt.preventDefault();\n        const body = JSON.stringify({\n            username: regNameInput.current.value,\n            password: regPasswordInput.current.value\n        })\n        evt.currentTarget.reset();\n        try {\n            const response = await fetch(`${url}/api/customers/register`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body\n            })\n            const data = await response.json();\n        } catch (err) {\n            console.error(err);\n        } finally {\n            console.log(\"check MongoDB Atlas if new Customer username was created...\");\n            // This redirects the user to the \"LoginPage\" after a new customer has succesffuly created an account.\n            window.location.href = \"/login\";\n        }\n    }\n    return (\n        <>\n            <div className=\"x-form-container\">\n                <h2>Register New Customer Form</h2>\n                <form onSubmit={registerHandler}>\n                    <label> New Username:\n            <input type=\"text\" ref={regNameInput} placeholder=\"New username login\" />\n                    </label>\n                    <label> New Password:\n            <input type=\"password\" ref={regPasswordInput} placeholder=\"New password login\" />\n                    </label>\n                    <button type=\"submit\">Submit!</button>\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default RegisterPage; ","import React, { useContext, useRef } from \"react\";\nimport { Redirect } from \"react-router\";\nimport { RacquetMongoDBContext } from \"../Components/Context\";\n\n/**\n * The \"LoginPage\" makes a \"POST\" request to the \"/login\" endpoint located inside of my \"server.js\" and retrieves a JSON object containing \"token\"\" and \"customer\" user-object that it uses to set to localStorage and react state.\n * */\n\n// ===================\n// SET DEV/PROD-ENVIRONMENT\n// ===================\nconst production = 'https://racquetdash.herokuapp.com';\nconst development = 'http://localhost:3000';\nconst url = (process.env.NODE_ENV ? development : production);\nconsole.log(`NODE_ENV is ${process.env.NODE_ENV}, so base_url is connecting to ${url}`)\n\nconst LoginPage = () => {\n    const { customerLoggedIn, tokenData } = useContext(RacquetMongoDBContext)\n    const [currentCustomerLoggedIn, setCustomerLoggedIn] = customerLoggedIn\n    const [token, setToken] = tokenData\n    const usernameInput = useRef(null);\n    const passwordInput = useRef(null);\n    const loginHandler = async (evt) => {\n        evt.preventDefault();\n        const body = JSON.stringify({\n            username: usernameInput.current.value,\n            password: passwordInput.current.value\n        })\n        evt.currentTarget.reset();\n        try {\n            const response = await fetch(`${url}/login`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body\n            })\n            const data = await response.json()\n            // This sets the \"token\" and \"currentCustomerLoggedIn\" inside localStorage and sets the state variables as well.\n            window.localStorage.setItem('token', `Bearer ${data.token}`)\n            window.localStorage.setItem('currentCustomerLoggedIn', data.user)\n            setCustomerLoggedIn(data.user)\n            setToken(`Bearer ${data.token}`)\n        } catch (err) {\n            console.error(err);\n        } finally {\n            console.log(\"check window.localStorage to see if user-token appears inside chrome dev tools...\")\n        }\n    }\n    return (\n        <>\n            <div className=\"x-form-container\">\n                <h2>Login Existing Customer Form</h2>\n                <form onSubmit={loginHandler}>\n                    <label> Username:\n            <input type=\"text\" ref={usernameInput} placeholder=\"Username login\" />\n                    </label>\n                    <label> Password:\n            <input type=\"password\" ref={passwordInput} placeholder=\"Password login\" />\n                    </label>\n                    <button type=\"submit\">Submit!</button>\n                </form>\n            </div>\n        </>\n    )\n}\nexport default LoginPage;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n// const baseUrl = 'http://localhost:3007/api/racquets'\n\n/**\n * I import <Route>, <Link>, and <Switch> react-router components here.\n * I use them inside my App.js file to render different react components when the customer clicks on different nav links.\n * For example, a customer can click on the \"My Cart\" link to render the <CartPage> component, the \"Customer Sign In\" link to render the <LoginPage>\n * component, or the \"About Us\" link to render the <AboutPage> component without having to refresh the page. \n */\nimport { Route, Link, Switch } from \"react-router-dom\";\n\n/** \n * \"RacquetMongoDBContext\" will be used to pass down react-state containing \"racquets\"-array fetched from RacquetDashDB. \n * I also pass down the \"currentCustomerLoggedIn\" object and \"token\" using context to components deeper in my react app component-tree.\n */\nimport { RacquetMongoDBContext } from \"./Components/Context.js\"\n\n// Page views rendered dynamically using react-router.\nimport HomePage from \"./Pages/HomePage\";\nimport ShowPage from \"./Pages/ShowPage\";\nimport CartPage from \"./Pages/CartPage\";\nimport AboutPage from \"./Pages/AboutPage\";\nimport ContactPage from \"./Pages/ContactPage\";\nimport RegisterPage from \"./Pages/RegisterPage\";\nimport LoginPage from \"./Pages/LoginPage\";\nimport Error from \"./Components/Error.js\"\nimport Loading from \"./Components/Loading.js\";\n\n// Custom App-CSS Stylesheet\nimport './App.css';\n\n// ===================\n// SET DEV-ENVIRONMENT\n// ===================\n// if (process.env.NODE_ENV === 'development') {\n//   require('dotenv').config({path: `.env.${process.env.NODE_ENV}`})\n// }\n// const path = require('path'); require('dotenv').config({ path: path.join(__dirname, ../.env.${process.env.NODE_ENV})}); \n\n// ===================\n// SET DEV/PROD-ENVIRONMENT\n// ===================\nconst production = 'https://racquetdash.herokuapp.com';\nconst development = 'http://localhost:3000';\nconst url = (process.env.NODE_ENV ? development : production);\nconsole.log(`NODE_ENV is ${process.env.NODE_ENV}, so base_url is connecting to ${url}`)\n\nfunction App() {\n  // \"racquet\" state stores Tennis Racquet objects fetched from RacquetDashDB. \n  const [racquets, setRacquets] = useState([])\n  // \"currentCustomerLoggedIn\" state stores \"Customer\" document-object that's set inside \"LoginPage.js\".\n  const [currentCustomerLoggedIn, setCustomerLoggedIn] = useState({})\n  // \"token\" state is set inside \"LoginPage.js\" once \"Customer\" logs in with valid username and password inside \"RacquetDashDB\".\n  const [token, setToken] = useState(\"\")\n  // \"loading\" state is used to render fun \"Loading\" component spinner while store app is fetching tennis racquets from RacquetDashDB.\n  const [loading, setLoading] = useState(false)\n  // \"error\" state is used to render \"Error\" component if \"Customer's\" cart is empty or if there's an error. \n  const [error, setError] = useState(false)\n\n  // \"logOutHandler\" is helper function triggered when \"Customer\" clicks on \"Log Out\" button. It removes \"token\" and \"currentCustomerLoggedIn\" from localStorage, resets both states, and redirects \"Customer\" to home page. \n  const logOutHandler = (evt) => {\n    window.localStorage.clear()\n    setToken(\"\")\n    setCustomerLoggedIn({})\n    window.location.href = \"/\";\n  }\n  // \"useEffect\" fetches tennis racquets to display from the RacquetDashDB. Since fetch is an asynchronous call, \"loading\" state is set to \"true\" while it waits for it to finish. \"App.js\" conditional renders the \"Loading\" component to display a spinner until the \"loading\" state is set to false and data is returned. If there is an error, the \"error\" state is set to the \"err.message\" and renders the \"Error\" component. \n  const fetchData = async () => {\n    try {\n      setLoading(true)\n      const { data } = await axios.get(`${url}/api/racquets`)\n      setLoading(false)\n      setRacquets(data)\n    } catch (err) {\n      console.error(err)\n      setError(err.message)\n      setLoading(false)\n    } finally {\n      console.log('check browser if racquets were displayed correctly... ')\n    }\n  }\n  useEffect(() => {\n    fetchData()\n    // If localStorage contains a \"token\", \"token\" state is set to it's value.\n    if (window.localStorage.getItem('token')) {\n      setToken(window.localStorage.getItem('token'))\n    };\n    // If localStorage stores logged in \"Customer\" object, \"currentCustomerLoggedIn\" state is set to it's value. \n    if (window.localStorage.getItem(\"currentCustomerLoggedIn\")) {\n      setCustomerLoggedIn(window.localStorage.getItem('currentCustomerLoggedIn'))\n    };\n  }, []);\n\n  return (\n    <>\n      {/* Chained ternary-operator expression that renders either the \"Loading\", \"Error\", or entire Racquet Dash application. */}\n      { loading\n        ? (<Loading />)\n        : error\n          ? (<Error variant=\"danger\">{error}</Error>)\n          /**\n           * \"RacquetMongoDBContext.Provider\" passes down \"racquet\" state, \"currentCustomerLoggedIn\" state, and \"token\" state to all child react components.\n           *  */\n          : (<RacquetMongoDBContext.Provider\n            value={{ racquetData: [racquets, setRacquets], customerLoggedIn: [currentCustomerLoggedIn, setCustomerLoggedIn], tokenData: [token, setToken] }} >\n            {/* Entire \"grid-container\" uses CSS Grid and Flex for responsive design. */}\n            <div className=\"x-grid-container\">\n              {/* Start of Navbar */}\n              <nav className=\"x-row\">\n                <div>\n                  {/* Racquet Dash Brand */}\n                  <Link className=\"x-brand\" to=\"/\">Racquet Dash 🎾</Link>\n                </div>\n                <div>\n                  {/* This conditionally renders the \"My Cart\" link and \"Log Out\" button if a customer is logged in, else it renders links to the \"AboutPage\", \"ContactPage\", \"RegisterPage\", and \"LoginPage\".*/}\n                  {\n                    currentCustomerLoggedIn.username\n                      ? (<>\n                        <span className=\"customer-username\">\n                          Welcome Back {currentCustomerLoggedIn.username}! <i class=\"fas fa-user\"></i></span>\n                        <Link className=\"x-nav-link\" to=\"/cart\">Go To My Cart <i className=\"fa fa-shopping-cart\"></i></Link>\n                        <button href=\"/\" onClick={logOutHandler}> Log Out </button></>)\n                      : (<>\n                        {/* \"Link\" to \"AboutPage\" with FontAwesome Icons */}\n                        <Link className=\"x-nav-link\" to=\"/about\">Our Mission <i class=\"fas fa-check\"></i></Link>\n                        {/* \"Link\" to \"ContactPage\" with FontAwesome Icons */}\n                        <Link className=\"x-nav-link\" to=\"/contact\">Get In Touch <i class=\"fas fa-address-book\"></i></Link>\n                        <Link className=\"x-nav-link\" to=\"/register\">New Customer Registration <i class=\"fas fa-registered\"></i></Link>\n                        <Link className=\"x-nav-link\" to=\"/login\">Customer Sign In <i class=\"fas fa-sign-in-alt\"></i></Link>\n                      </>)\n                  }\n                </div>\n              </nav>\n              {/* End of Navbar */}\n              <main>\n                {/* Start of Routers */}\n                <Switch>\n                  <Route path=\"/about\" component={AboutPage} />\n                  <Route path=\"/contact\" component={ContactPage} />\n                  <Route path=\"/register\" component={RegisterPage} />\n                  <Route path=\"/login\" component={LoginPage}/>\n                  <Route path=\"/cart\" component={CartPage} />\n                  {/* \"ShowPage\" uses \"routerProps\" to render correct tennis racquet model to display using the \"_id\" from \"routerProps.match.params.id\" */}\n                  <Route path=\"/product/:id\" render={(routerProps) => { return <ShowPage routerProps={routerProps} /> }} />\n                  <Route exact path=\"/\" component={HomePage} />\n                </Switch>\n                {/* End of Routers */}\n              </main>\n              {/* Footer */}\n              <footer className=\"x-row x-center\">\n                <Link className=\"\" to=\"/\">\n                  Racquet Dash Store App 🎾 made by Mike Truong\n                </Link>\n              </footer>\n              {/* End of Footer */}\n            </div>\n          </RacquetMongoDBContext.Provider>)\n      }\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// Browser-Router\nimport { BrowserRouter as Router } from \"react-router-dom\";\n// rootElement \nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render( \n    <React.StrictMode>\n      {/* Router Wraps App Component */}\n      <Router>\n        <App />\n      </Router>\n    </React.StrictMode>,\n  rootElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}